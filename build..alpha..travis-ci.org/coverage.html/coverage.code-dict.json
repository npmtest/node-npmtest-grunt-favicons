{"/home/travis/build/npmtest/node-npmtest-grunt-favicons/test.js":"/* istanbul instrument in package npmtest_grunt_favicons */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-favicons/lib.npmtest_grunt_favicons.js":"/* istanbul instrument in package npmtest_grunt_favicons */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_grunt_favicons = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_grunt_favicons = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-favicons/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-grunt-favicons && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_grunt_favicons */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_grunt_favicons\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_grunt_favicons.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_grunt_favicons.rollup.js'] =\n            local.assetsDict['/assets.npmtest_grunt_favicons.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_grunt_favicons.__dirname + '/lib.npmtest_grunt_favicons.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-favicons/node_modules/grunt-favicons/Gruntfile.js":"/*\n * grunt-favicons\n * https://github.com/gleero/grunt-favicons\n *\n * Copyright (c) 2013 Vladimir Perekladov\n * Licensed under the MIT license.\n */\n\nmodule.exports = function(grunt) {\n\n    grunt.initConfig({\n\n        jshint: {\n            files: [\n                'tasks/favicons.js',\n                'Gruntfile.js'\n            ],\n            options: {\n                jshintrc: '.jshintrc'\n            }\n        },\n\n        favicons: {\n            stage1: {\n                src: 'test/test.png',\n                dest: 'test/out'\n            },\n            stage2: {\n                options: {\n                    html: 'test/out/test.html',\n                    trueColor: true,\n                    HTMLPrefix: \"/images/icons/\",\n                    windowsTile: false,\n                    precomposed: false,\n                    appleTouchBackgroundColor: \"#a0b4bb\",\n                    appleTouchPadding: 25,\n                    firefox: true,\n                    sharp: 1,\n                    debug: true,\n                    firefoxManifest: 'test/out/manifest.webapp',\n                    androidHomescreen: true\n                },\n                src: 'test/test.png',\n                dest: 'test/out'\n            },\n            stage3: {\n                options: {\n                    html: 'test/out/test.php',\n                    HTMLPrefix: \"<?= SITE_TEMPLATE_PATH; ?>/icons/\",\n                    windowsTile: true,\n                    appleTouchPadding: 0,\n                    tileColor: \"none\",\n                    firefox: true,\n                    firefoxRound: true,\n                    coast: true\n                },\n                src: 'test/img.jpg',\n                dest: 'test/out'\n            },\n            stage4: {\n                options: {\n                    html: 'test/out/test.html.twig',\n                    HTMLPrefix: '{{ releaseDir }}/icons/',\n                    trueColor: true,\n                    precomposed: true,\n                    appleTouchBackgroundColor: \"#a0b4bb\",\n                    coast: true,\n                    apple: false,\n                    regular: false,\n                    windowsTile: true,\n                    tileBlackWhite: false,\n                    tileColor: 'auto'\n                },\n                src: 'test/img.jpg',\n                dest: 'test/out'\n            },\n            stage5: {\n              options: {\n                html: 'test/out/test.html.indent',\n                trueColor: true,\n                HTMLPrefix: \"/images/icons/\",\n                windowsTile: false,\n                precomposed: false,\n                appleTouchBackgroundColor: \"#a0b4bb\",\n                appleTouchPadding: 25,\n                firefox: true,\n                sharp: 1,\n                debug: true,\n                firefoxManifest: 'test/out/manifest.webapp',\n                androidHomescreen: true,\n                indent: '  '\n              },\n              src: 'test/test.png',\n              dest: 'test/out'\n            }\n        },\n\n        copy: {\n            html: {\n                src: 'test/index.html',\n                dest: 'test/out/test.html'\n            },\n            php: {\n                src: 'test/index.html',\n                dest: 'test/out/test.php'\n            },\n            manifest: {\n                src: 'test/manifest.webapp',\n                dest: 'test/out/manifest.webapp'\n            },\n            indent: {\n                src: 'test/index.html',\n                dest: 'test/out/test.html.indent'\n            }\n        },\n\n        nodeunit: {\n            stage1: ['test/test_stage1.js'],\n            stage2: ['test/test_stage2.js'],\n            stage3: ['test/test_stage3.js'],\n            stage4: ['test/test_stage4.js'],\n            stage5: ['test/test_stage5.js']\n        },\n\n        clean: ['test/out']\n    });\n\n    grunt.loadNpmTasks('grunt-contrib-jshint');\n    grunt.loadNpmTasks('grunt-contrib-nodeunit');\n    grunt.loadNpmTasks('grunt-contrib-copy');\n    grunt.loadNpmTasks('grunt-contrib-clean');\n    grunt.loadTasks('tasks');\n\n    // Default options\n    grunt.registerTask('stage1', ['clean', 'copy', 'favicons:stage1', 'nodeunit:stage1']);\n    grunt.registerTask('stage2', ['clean', 'copy', 'favicons:stage2', 'nodeunit:stage2']);\n    grunt.registerTask('stage3', ['clean', 'copy:php', 'copy:manifest', 'favicons:stage3', 'nodeunit:stage3']);\n    grunt.registerTask('stage4', ['clean', 'favicons:stage4', 'nodeunit:stage4']);\n    grunt.registerTask('stage5', ['clean', 'copy', 'favicons:stage5', 'nodeunit:stage5']);\n\n    grunt.registerTask('test', ['jshint', 'stage1', 'stage2', 'stage3', 'stage4', 'stage5', 'clean']);\n    grunt.registerTask('default', ['test']);\n\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-favicons/node_modules/grunt-favicons/tasks/favicons.js":"/*\n * grunt-favicons\n * https://github.com/gleero/grunt-favicons\n *\n * Copyright (c) 2013 Vladimir Perekladov\n * Licensed under the MIT license.\n */\n\nvar path = require('path');\nvar fs = require('fs');\nvar exec = require(\"sync-exec\");\n\nmodule.exports = function(grunt) {\n\n    // Tasks\n    grunt.registerMultiTask('favicons', 'Generate favicon.ico and icons for iOS, Android, WP8 and Firefox (OS)', function() {\n\n        var target = this.target;\n\n        // Default options\n        var options = this.options({\n            debug: false,\n            trueColor: false,\n            precomposed: true,\n            HTMLPrefix: \"\",\n            appleTouchBackgroundColor: \"auto\", // none, auto, #color\n            appleTouchPadding: 15,\n            windowsTile: true,\n            coast: false,\n            sharp: 0,\n            tileBlackWhite: true,\n            tileColor: \"auto\", // none, auto, #color\n            firefox: false,\n            apple: true,\n            regular: true,\n            firefoxRound: false,\n            firefoxManifest: \"\",\n            androidHomescreen: false,\n            androidIcons : false,\n            indent: \"\\t\",\n            timestamp: false,\n            truncateHTML: false,\n            getLowResolutionImagePath: function (srcFilePath, size) {\n                var extname = path.extname(srcFilePath);\n                return path.join(path.dirname(srcFilePath), path.basename(srcFilePath, extname) + '.' + size + extname);\n            }\n        });\n\n        // Execute external command\n        var execute = function(cmd) {\n            if (options.debug) {\n                console.log(\"\\n\\033[37m\" + cmd + \"\\033[0m\");\n            }\n            return exec(cmd);\n        };\n\n        // Convert image with imagemagick\n        var convert = function(args) {\n            args.unshift(\"convert\");\n            var ret = execute(args.join(\" \"));\n            if (ret.code === 127) {\n                return grunt.warn(\n                    'You need to have ImageMagick installed in your PATH for this task to work.'\n                );\n            }\n        };\n\n        // Generate background color for apple touch icons\n        var generateColor = function(src) {\n            var ret = execute(\"convert \" + src + \" -polaroid 180 -resize 1x1 -colors 1 -alpha off -unique-colors txt:- | grep -v ImageMagick | sed -n 's/.*\\\\(#[0-9A-F]*\\\\).*/\\\\1/p'\");\n            return ret.stdout.trim();\n        };\n\n        // Generate background color for windows 8 tile\n        var generateTileColor = function(src) {\n            var ret = execute(\"convert \" + src + \" +dither -colors 1 -alpha off -unique-colors txt:- | grep -v ImageMagick | sed -n 's/.*\\\\(#[0-9A-F]*\\\\).*/\\\\1/p'\");\n            return ret.stdout.trim();\n        };\n\n        var combine = function(src, dest, size, fname, additionalOpts, padding) {\n            var out = [\n                src,\n                \"-resize\",\n                size\n            ].concat(additionalOpts);\n            if (options.sharp > 0) {\n                out = out.concat([\n                    \"-adaptive-sharpen\",\n                    options.sharp + \"x\" + options.sharp\n                ]);\n            }\n            // icon padding\n            if (typeof(padding)==='number' && padding >= 0 && padding < 100) {\n                var thumb = Math.round((100 - padding) * parseInt(size.split(\"x\")[0], 10) / 100);\n                out = out.concat([\n                    \"-gravity\",\n                    \"center\",\n                    \"-thumbnail\",\n                    \"\\\"\" + thumb + \"x\" + thumb + \">\" + \"\\\"\",\n                    \"-extent\",\n                    size\n                ]);\n            }\n            out.push(path.join(dest, fname));\n            return out;\n        };\n\n\n\n        // Append all icons to HTML as meta tags (needs cheerio)\n        var needHTML = options.html !== undefined && options.html !== \"\";\n\n        if (needHTML) {\n            var html = '';\n            var cheerio = require(\"cheerio\");\n            var contents = (grunt.file.exists(options.html)) ? grunt.file.read(options.html) : \"\";\n            var $;\n            if (contents !== \"\" && !options.truncateHTML) {\n                $ = cheerio.load(contents);\n                // Removing exists favicon from HTML\n                $('link[rel=\"shortcut icon\"]').remove();\n                $('link[rel=\"icon\"]').remove();\n                $('link[rel=\"apple-touch-icon\"]').remove();\n                $('link[rel=\"apple-touch-icon-precomposed\"]').remove();\n                $('meta').each(function(i, elem) {\n                    var name = $(this).attr('name');\n                    if(name && (name === 'msapplication-TileImage' ||\n                                name === 'msapplication-TileColor' ||\n                                name.indexOf('msapplication-square') >= 0)) {\n                        $(this).remove();\n                    }\n                });\n                 html = $.html().replace(/(?:(?:^|\\n)\\s+|\\s+(?:$|\\n))/g,'').replace(/\\s+/g,' ');\n            }\n            if(html === '') {\n                $ = cheerio.load('');\n            }\n        }\n\n        // Iterate over all specified file groups.\n        this.files.forEach(function(f) {\n\n            if (f.src.length === 0) {\n                return grunt.warn ('Source file not found.');\n            }\n\n            if (!grunt.file.isDir(f.dest)) {\n                grunt.file.mkdir(f.dest);\n                grunt.log.ok('Created output folder at \"', f.dest, '\"');\n            }\n\n            // Iterate source files\n            f.src.forEach(function(source) {\n\n                var resolmap = {};\n\n                // Create resized version of source image\n                // 16x16: desktop browsers, address bar, tabs\n                // 32x32: safari reading list, non-retina iPhone, windows 7+ taskbar\n                // 48x48: windows desktop\n\n                var files = [];\n                var prefix = options.precomposed ? \"-precomposed\" : \"\";\n\n                // Convert options for transparent and flatten\n                if (options.appleTouchBackgroundColor === \"auto\") {\n                    options.appleTouchBackgroundColor = generateColor(source);\n                }\n\n                var additionalOpts = options.appleTouchBackgroundColor !== \"none\" ?\n                    [ \"-background\", '\"' + options.appleTouchBackgroundColor + '\"', \"-flatten\"] : [];\n                grunt.log.write('Resizing images for \"' + source + '\"... ');\n\n                if (options.regular) {\n\n                    // regular png\n                    ['16x16', '32x32', '48x48'].forEach(function(size) {\n                        var lowResolutionImagePath = options.getLowResolutionImagePath(source, size);\n                        var saveTo = path.join(f.dest, size + '.png');\n                        var src = source;\n                        if (fs.existsSync(lowResolutionImagePath)) {\n                            src = lowResolutionImagePath;\n                        }\n                        convert([src, '-resize', size, saveTo]);\n                        files.push(saveTo);\n                    });\n                    grunt.log.ok();\n\n                    // favicon.ico\n                    grunt.log.write('favicon.ico... ');\n                    convert(files.concat([\n                        \"-alpha on\",\n                        \"-background none\",\n                        options.trueColor ? \"\" : \"-bordercolor white -border 0 -colors 64\",\n                        path.join(f.dest, 'favicon.ico')\n                    ]));\n                    grunt.log.ok();\n\n                    // 64x64 favicon.png higher priority than .ico\n                    grunt.log.write('favicon.png... ');\n                    convert([source, '-resize', \"64x64\", path.join(f.dest, 'favicon.png')]);\n                    grunt.log.ok();\n                }\n\n                ////// PNG's for iOS and Android icons\n\n                if (options.apple) {\n                    // 57x57: iPhone non-retina, Android 2.1+\n                    grunt.log.write('apple-touch-icon.png... ');\n                    convert(combine(source, f.dest, \"57x57\", \"apple-touch-icon.png\", additionalOpts, options.appleTouchPadding));\n                    grunt.log.ok();\n\n                    if (options.precomposed) {\n                        grunt.log.write('apple-touch-icon' + prefix + '.png... ');\n                        convert(combine(source, f.dest, \"57x57\", \"apple-touch-icon\" + prefix + \".png\", additionalOpts, options.appleTouchPadding));\n                        grunt.log.ok();\n                    }\n\n                    // 60x60: iPhone iOS 7 without size\n                    grunt.log.write('apple-touch-icon-60x60-precomposed.png... ');\n                    convert(combine(source, f.dest, \"60x60\", \"apple-touch-icon-60x60-precomposed.png\", additionalOpts, options.appleTouchPadding));\n                    grunt.log.ok();\n\n                    // 72x72: iPad non-retina, iOS 6 and lower\n                    grunt.log.write('apple-touch-icon-72x72' + prefix + '.png... ');\n                    convert(combine(source, f.dest, \"72x72\", \"apple-touch-icon-72x72\" + prefix + \".png\", additionalOpts, options.appleTouchPadding));\n                    grunt.log.ok();\n\n                    // 76x76: iPad non-retina, iOS 7 and higher\n                    grunt.log.write('apple-touch-icon-76x76-precomposed.png... ');\n                    convert(combine(source, f.dest, \"76x76\", \"apple-touch-icon-76x76-precomposed.png\", additionalOpts, options.appleTouchPadding));\n                    grunt.log.ok();\n\n                    // 114x114: iPhone retina, iOS 6 and lower\n                    grunt.log.write('apple-touch-icon-114x114' + prefix + '.png... ');\n                    convert(combine(source, f.dest, \"114x114\", \"apple-touch-icon-114x114\" + prefix + \".png\", additionalOpts, options.appleTouchPadding));\n                    grunt.log.ok();\n\n                    // 120x120: iPhone retina, iOS 7 and higher\n                    grunt.log.write('apple-touch-icon-120x120-precomposed.png... ');\n                    convert(combine(source, f.dest, \"120x120\", \"apple-touch-icon-120x120-precomposed.png\", additionalOpts, options.appleTouchPadding));\n                    grunt.log.ok();\n\n                    // 144x144: iPad retina, iOS 6 and lower\n                    grunt.log.write('apple-touch-icon-144x144' + prefix + '.png... ');\n                    convert(combine(source, f.dest, \"144x144\", \"apple-touch-icon-144x144\" + prefix + \".png\", additionalOpts, options.appleTouchPadding));\n                    grunt.log.ok();\n\n                    // 152x152: iPad retina, iOS 7 and higher\n                    grunt.log.write('apple-touch-icon-152x152-precomposed.png... ');\n                    convert(combine(source, f.dest, \"152x152\", \"apple-touch-icon-152x152-precomposed.png\", additionalOpts, options.appleTouchPadding));\n                    grunt.log.ok();\n                }\n\n                // 228x228: Coast\n                if (options.coast) {\n                    grunt.log.write('coast-icon-228x228.png... ');\n                    convert(combine(source, f.dest, \"228x228\", \"coast-icon-228x228.png\", additionalOpts));\n                    grunt.log.ok();\n                }\n\n                // Android Homescreen app\n                if (options.androidHomescreen) {\n                    grunt.log.write('homescreen-192x192.png... ');\n                    convert(combine(source, f.dest, \"192x192\", \"homescreen-192x192.png\", additionalOpts));\n                    grunt.log.ok();\n                }\n                \n                // Android Icons app\n                if (options.androidIcons) {\n                    // 36x36: LDPI\n                    grunt.log.write('android-icons-36x36.png... ');\n                    convert(combine(source, f.dest, \"36x36\", \"android-icons-36x36.png\", additionalOpts));\n                    grunt.log.ok();\n\n                    // 48x48: MDPI\n                    grunt.log.write('android-icons-48x48.png... ');\n                    convert(combine(source, f.dest, \"48x48\", \"android-icons-48x48.png\", additionalOpts));\n                    grunt.log.ok();\n\n                    // 72x72: HDPI\n                    grunt.log.write('android-icons-72x72.png... ');\n                    convert(combine(source, f.dest, \"72x72\", \"android-icons-72x72.png\", additionalOpts));\n                    grunt.log.ok();\n\n                    // 96x96: XHDPI\n                    grunt.log.write('android-icons-96x96.png... ');\n                    convert(combine(source, f.dest, \"96x96\", \"android-icons-96x96.png\", additionalOpts));\n                    grunt.log.ok();\n                }\n\n                // Firefox\n                if (options.firefox) {\n                    var updateFirefoxManifest = (options.firefoxManifest !== undefined && options.firefoxManifest !== ''),\n                      contentFirefox;\n\n                    if (updateFirefoxManifest) {\n                        var contentsFirefox = (grunt.file.exists(options.firefoxManifest)) ? grunt.file.read(options.firefoxManifest) : '{}';\n                        contentFirefox = JSON.parse(contentsFirefox);\n                        contentFirefox.icons = {};\n                    }\n\n                    ['16', '30', '32', '48', '60', '64', '90', '120', '128', '256'].forEach(function(size) {\n                        var dimensions = size + 'x' + size;\n                        var dhalf = \"circle \"+size/2+\",\"+size/2+\" \"+size/2+\",1\";\n                        var fifname = \"firefox-icon-\" + dimensions + \".png\";\n                        grunt.log.write(fifname + '... ');\n                        convert(combine(source, f.dest, dimensions, fifname, []));\n\n                        if (options.firefoxRound) {\n                            convert([\"-size\", dimensions, \"xc:none\", \"-fill\", path.join(f.dest, fifname), \"-draw\", '\"'+dhalf+'\"', path.join(f.dest, fifname)]);\n                        }\n\n                        if (updateFirefoxManifest) {\n                            contentFirefox.icons[size] = options.HTMLPrefix + fifname;\n                        }\n\n                        grunt.log.ok();\n                    });\n\n                    if (updateFirefoxManifest) {\n                        grunt.log.write('Updating Firefox manifest... ');\n\n                        fs.writeFileSync(options.firefoxManifest, JSON.stringify(contentFirefox, null, 2));\n                    }\n\n                    grunt.log.ok();\n                }\n\n                ////// Windows 8 Tile\n\n                if (options.windowsTile) {\n\n                    grunt.log.write('windows-tile-144x144.png... ');\n\n                    // MS Tiles\n\n                    if (options.tileBlackWhite) {\n                        additionalOpts = [\n                            \"-fuzz 100%\",\n                            \"-fill black\",\n                            \"-opaque red\",\n                            \"-fuzz 100%\",\n                            \"-fill black\",\n                            \"-opaque blue\",\n                            \"-fuzz 100%\",\n                            \"-fill white\",\n                            \"-opaque green\"\n                        ];\n                    } else {\n                        additionalOpts = [];\n                    }\n\n                    // Tile BG color (experimental)\n                    if (options.tileColor === \"auto\") {\n                        options.tileColor = generateTileColor(source);\n                    }\n\n                    // Setting background color in image\n                    if (!needHTML) {\n                        if (options.tileColor !== \"none\") {\n                            additionalOpts = additionalOpts.concat([\n                                \"-background\",\n                                '\"' + options.tileColor + '\"',\n                                \"-flatten\"\n                            ]);\n                        }\n                    }\n\n                    convert(combine(source, f.dest, \"70x70\", \"windows-tile-70x70.png\", additionalOpts));\n                    convert(combine(source, f.dest, \"144x144\", \"windows-tile-144x144.png\", additionalOpts));\n                    convert(combine(source, f.dest, \"150x150\", \"windows-tile-150x150.png\", additionalOpts));\n                    convert(combine(source, f.dest, \"310x310\", \"windows-tile-310x310.png\", additionalOpts));\n                    grunt.log.ok();\n\n                }\n\n                // Append icons to <HEAD>\n                if (needHTML) {\n                    grunt.log.write('Updating HTML... ');\n\n                    var timestamp = '?ts=' + new Date().getTime().toString();\n\n                    var elements = \"\";\n\n                    if (options.windowsTile) {\n                        elements += options.indent + \"<meta name=\\\"msapplication-square70x70logo\\\" content=\\\"\" + options.HTMLPrefix + \"windows-tile-70x70.png\" + (options.timestamp ? timestamp : '') + \"\\\"/>\\n\";\n                        elements += options.indent + \"<meta name=\\\"msapplication-square150x150logo\\\" content=\\\"\" + options.HTMLPrefix + \"windows-tile-150x150.png\" + (options.timestamp ? timestamp : '') + \"\\\"/>\\n\";\n                        elements += options.indent + \"<meta name=\\\"msapplication-square310x310logo\\\" content=\\\"\" + options.HTMLPrefix + \"windows-tile-310x310.png\" + (options.timestamp ? timestamp : '') + \"\\\"/>\\n\";\n                        elements += options.indent + \"<meta name=\\\"msapplication-TileImage\\\" content=\\\"\" + options.HTMLPrefix + \"windows-tile-144x144.png\" + (options.timestamp ? timestamp : '') + \"\\\"/>\\n\";\n                        if (options.tileColor !== \"none\") {\n                            elements += options.indent + \"<meta name=\\\"msapplication-TileColor\\\" content=\\\"\" + options.tileColor + \"\\\"/>\\n\";\n                        }\n                    }\n\n                    // iOS\n                    if (options.apple) {\n                        elements += options.indent + \"<link rel=\\\"apple-touch-icon-precomposed\\\" sizes=\\\"152x152\\\" href=\\\"\" + options.HTMLPrefix + \"apple-touch-icon-152x152-precomposed.png\" + (options.timestamp ? timestamp : '') + \"\\\">\\n\";\n                        elements += options.indent + \"<link rel=\\\"apple-touch-icon-precomposed\\\" sizes=\\\"120x120\\\" href=\\\"\" + options.HTMLPrefix + \"apple-touch-icon-120x120-precomposed.png\" + (options.timestamp ? timestamp : '') + \"\\\">\\n\";\n\n                        elements += options.indent + \"<link rel=\\\"apple-touch-icon-precomposed\\\" sizes=\\\"76x76\\\" href=\\\"\" + options.HTMLPrefix + \"apple-touch-icon-76x76-precomposed.png\" + (options.timestamp ? timestamp : '') + \"\\\">\\n\";\n                        elements += options.indent + \"<link rel=\\\"apple-touch-icon-precomposed\\\" sizes=\\\"60x60\\\" href=\\\"\" + options.HTMLPrefix + \"apple-touch-icon-60x60-precomposed.png\" + (options.timestamp ? timestamp : '') + \"\\\">\\n\";\n\n                        elements += options.indent + \"<link rel=\\\"apple-touch-icon\" + prefix + \"\\\" sizes=\\\"144x144\\\" href=\\\"\" + options.HTMLPrefix + \"apple-touch-icon-144x144\" + prefix + \".png\" + (options.timestamp ? timestamp : '') + \"\\\">\\n\";\n                        elements += options.indent + \"<link rel=\\\"apple-touch-icon\" + prefix + \"\\\" sizes=\\\"114x114\\\" href=\\\"\" + options.HTMLPrefix + \"apple-touch-icon-114x114\" + prefix + \".png\" + (options.timestamp ? timestamp : '') + \"\\\">\\n\";\n\n                        elements += options.indent + \"<link rel=\\\"apple-touch-icon\" + prefix + \"\\\" sizes=\\\"72x72\\\" href=\\\"\" + options.HTMLPrefix + \"apple-touch-icon-72x72\" + prefix + \".png\" + (options.timestamp ? timestamp : '') + \"\\\">\\n\";\n                        elements += options.indent + \"<link rel=\\\"apple-touch-icon\\\" sizes=\\\"57x57\\\" href=\\\"\" + options.HTMLPrefix + \"apple-touch-icon.png\" + (options.timestamp ? timestamp : '') + \"\\\">\\n\";\n                    }\n\n                    // Coast browser\n                    if (options.coast) {\n                      elements += options.indent + \"<link rel=\\\"icon\\\" sizes=\\\"228x228\\\" href=\\\"\" + options.HTMLPrefix + \"coast-icon-228x228.png\" + (options.timestamp ? timestamp : '') + \"\\\" />\\n\";\n                    }\n\n                    // Android Homescreen app\n                    if (options.androidHomescreen) {\n                      elements += options.indent + \"<meta name=\\\"mobile-web-app-capable\\\" value=\\\"yes\\\" />\\n\";\n                      elements += options.indent + \"<link rel=\\\"icon\\\" sizes=\\\"192x192\\\" href=\\\"\" + options.HTMLPrefix + \"homescreen-192x192.png\" + (options.timestamp ? timestamp : '') + \"\\\" />\\n\";\n                    }\n\n                    // Default\n                    if (options.regular) {\n                        elements += options.indent + \"<link rel=\\\"shortcut icon\\\" href=\\\"\" + options.HTMLPrefix + \"favicon.ico\" + (options.timestamp ? timestamp : '') + \"\\\" />\\n\";\n                        elements += options.indent + \"<link rel=\\\"icon\\\" type=\\\"image/png\\\" sizes=\\\"64x64\\\" href=\\\"\" + options.HTMLPrefix + \"favicon.png\" + (options.timestamp ? timestamp : '') + \"\\\" />\\n\";\n                    }\n\n                    // Windows 8 tile. In HTML version background color will be as meta-tag\n\n                    if($('head').length > 0) {\n                      $(\"head\").append(elements);\n                    } else {\n                      $.root().append(elements);\n                    }\n\n                    var out = $.html();\n\n                    // Hack for php tags\n                    if (path.extname(options.html) === \".php\") {\n                        out = out.replace(/&lt;\\?/gi, '<?').replace(/\\?&gt;/gi, '?>');\n                    }\n\n                    // Saving HTML\n                    grunt.file.write(options.html, out);\n\n                    grunt.log.ok();\n                }\n\n                // Cleanup\n                if (options.regular) {\n                    ['16x16', '32x32', '48x48'].forEach(function(size) {\n                        fs.unlink(path.join(f.dest, size + '.png'));\n                    });\n                }\n\n            });\n\n        });\n    });\n\n};\n"}